

springboot进阶
-------------------------------------------
springboot热部署
依赖：
	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
  同时要在
            1、setting –> compiler将 Build project automatically 勾选上
            2、alt + shift + a 搜索 registry 选第一个，弹出框后下拉找到 compiler.automake.allow.when.app.running 勾选上即可

-------------------------------------------
springboot 基本目录
基本目录结构
	controller
	service
	     impl
	mapper(DAO)
	utils
	pojo(domain)
	config
	interceoter(拦截器)
	dto

	resources
	   static
	   templates
	   application.properties

------------------------------------------
mybatis逆向工程

   生成实体类
	1、Idea 连接mysql数据库
	   View --> Tool Windows --> database 选择mysql进行配置 --> 选择数据库进行连接

	2、右击表格，选择scripted Extensions --> Generate POJOs.groovy 可以创建对应的实体类
	   会出现一个所在的包名与项目中的包名不一致
	  
	   因此我们选择scritped Extensions -->Go To Scripts Directory
	   选择Generate POJOs.grovvy 修改packageName typeMapping 
	   
	   生成的实体类需要序列化 继承Serializable
 
-------------------------------------
spring 配置文件映射到属性和实体类
  配置文件
	1、创建一个配置文件 加上@Configuration 代表这是一个配置文件  加上@PropertySource(value="") 代表资源文件的路径
		@Configuration
		@PropertySource(value = "classpath:application.properties")
		public class WeChatConfig {
		
	
		@Valur(${"xxx"})
		private String xxx;
		//省略getter and setter方法

			}
	2、控制器中注入以上的配置文件，并通过getter方法获取相对应的数据

----------------------------------------
mybatis 整合alibaba 数据源
	
	1、加入依赖 mybatis, mysql 连接， alibaba第三番数据源

		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.0.18</version>

	2、propertie对mybatis进行相关配置
	 spring.datasource.url=jdbc:mysql://localhost:3306/xdxlass?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
         spring.datasource.username=root
	 spring.datasource.password=CZJ4399
	 spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

	3、启动类加入@MapperScan 扫描mapper（DAO）包中的所有类
	
	4、mapper中创建相关的接口，写入相关的方法，并使用@Select进行数据库的语句查询
		使用@Results({@Result(column="", property="")}) 进行属性的映射（该配置可以自动转换下划线转驼峰配置mybatis.configuration.map-underscore-to-camel-case=true）

		 @Select("select * from video;")
    @Results({
            @Result(column = "cover_img", property = "coverImg"),
            @Result(column = "view_num", property = "viewNum"),
            @Result(column = "create_time", property = "createTime")
    })
    List<Video> findList();
	5、控制器中@Autowired注入mapper

  增加打印SQL的语句 properites配置：mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
  自增id,  mapper中增加注解：@Options(useGeneratedKeys = true, keyProperty="id", keyColumn="id")


--------------------------------------
springboot 协议规范
	自定义注释类型：
		  /*
         * @Description:
         * @Param: [id]
         * @return: java.lang.Object
         * @Author:  zhijie
         * @Date: 2019/4/2
         */
	mapping方法中，使用@RequestParam("")映射属性名称
	@Responsebody:请求体映射实体类，放在参数中  需要制定https头为：content-type为application/json charset=utf-8		
		
		  public Object updatevideo(@RequestBody Video video) {
        		return videoService.update(video);
    		}

-------------------------------------------
动态SQL

	1、java代码 动态SQL语句写法：
	  public String updateVideo(final Video video) {
      return new SQL() {
            {
                UPDATE("video");
                //条件写法
                if(video.getTitle() != null) {
                    SET("title = #{title}");
                }
		.......
	   }.toString();

	2、在mapper中修改@Update --->  @UpdateProvider(type="", method="")
		// @Update("update video set title=#{title} where id=#{id}")
   		 @UpdateProvider(type = VideoProvider.class, method = "updateVideo")
    			int update(Video video)

	传输格式
		{
	"id":8,
	"title":"js高级前端视频",
	"summary":"动态语句测试"
}

-------------------------------------------------
分页接口使用

	1、添加依赖
			<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper</artifactId>
			<version>5.1.2-beta</version>
			</dependency>

	2、配置mybatis插件接口

	@Configuration
	public class MybatisPageHelperConfig {

    @Bean
    public PageHelper pageHelper() {
        PageHelper pageHelper = new PageHelper();
        Properties properties = new Properties();

        //设置会ture,会将rowBounds第一个参数offset当成pageNum页码使用
        properties.setProperty("offsetAsPageNum", "true");
        //将rowBounds分页进行count查询
        properties.setProperty("rowBoundsWithCount", "true");
        properties.setProperty("reasonable", "true");
        pageHelper.setProperties(properties);
        return pageHelper;
    }
}

----------------------------------------------
springboot  JWT
	JWT:通过加解密算法生成token校验

	  优点：避免查库，存储在客户端
          缺点：token加密前不能包含敏感信息

	JTW组成： 头部、负载、签名
		头部 header:描述签名算法
		负载 payload:包含用户的基本信息
		签名 signature:把 header和payload进行加密 

    
  JWT开发：封装方法
		1、加入依赖
		<!--JWT-->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.7.0</version>
		</dependency>

		2、加入工具类，分别写入加密、解密方法
	
	加密：  public static String geneJsonWebToken(User user) {
        if(user == null || user.getId() == null || user.getName() == null || user.getHeadImg() == null) {
          return null;
        }
        String token =  Jwts.builder().setSubject(SUBJECT)
                .claim("id", user.getId())
                .claim("name", user.getName())
                .claim("img", user.getHeadImg())
                .setIssuedAt(new Date())    //发行时间
                .setExpiration(new Date	(System.currentTimeMillis() + EXPIRE))   //过期时间
                .signWith(SignatureAlgorithm.HS256, 		APPSECRET).compact();   //

        return token;
    }

	解密：   
		public static Claims checkJWT(String token) {
       		try {
           //获取 payload
            final Claims claims =  Jwts.parser().setSigningKey(APPSECRET)
                    .parseClaimsJws(token).getBody();
            return claims;
        }
        catch(Exception e){return null;}
    }
	
	测试类。。。